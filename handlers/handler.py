import asyncio
import logging

from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, ContentType
from aiogram import F, Router
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from auxiliary_functions.helper_func import *
from keyboard.keyboard import *

class Reg(StatesGroup):
    id = State()
    remove_admin = State()
    download_picture = State()
    add_new_group_name = State()
    add_new_group_username = State()
    delete_group = State()
    get_player_id = State()
    text = State()


logging.basicConfig(level=logging.INFO)
router = Router()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
async def send_admin_panel(message: Message):
    await message.answer('–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∞–¥–º–∏–Ω—Å–∫–∞—è —á–∞—Å—Ç—å!', reply_markup=keyboard_main)


# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ/–≥–∞–π–¥–∞
async def send_guid(message: Message):
    # # –í—ã–∑–æ–≤ –∫–æ—Ä—É—Ç–∏–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π, –¥–∞–±—ã —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    # a = await message.answer('–í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è...')
    # input_file = 'info_video.mov'
    # output_file = 'compressed_video.mov'
    #
    # # –°–∂–∏–º–∞–µ–º –≤–∏–¥–µ–æ
    # clip = VideoFileClip(input_file)
    # clip = clip.resized(height=1080)  # –ò–∑–º–µ–Ω–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
    # clip.write_videofile(output_file, codec='libx264', bitrate='500k')
    #
    #
    # # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ
    # try:
    #     async with aiofiles.open(output_file, 'rb') as file:
    #         video = BufferedInputFile(await file.read(), filename=output_file)
    #         await message.bot.send_video(
    #             chat_id=message.chat.id,
    #             video=video,
    #             caption='–õ–æ–≤–∏—Ç–µ –≥–∞–π–¥ –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–µ –°—Ç–æ—Ä–∏—Å —Å –±–æ–ª—å—à–∏–º –æ—Ö–≤–∞—Ç–æ–º;'
    #         )

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –∫–æ—Ä—É—Ç–∏–Ω—ã
    # await a.delete()

    # except FileNotFoundError:
    #     print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    #     await message.answer("–§–∞–π–ª –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.")
    # except Exception as e:
    #     print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
    #     await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    await message.answer(
        '–î–µ—Ä–∂–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫, –∫–∞–∫ —Å–Ω–∏–º–∞—Ç—å —Å—Ç–æ—Ä–∏—Å—ã, —á—Ç–æ–±—ã –æ—Ö–≤–∞—Ç—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–æ—Å–ª–∏! \n\n https://youtu.be/cD60phCue7o?si=kp4eVrOVYfrk-2Qc', disable_web_page_preview=False)


# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≥—Ä—É–ø–ø–∞–º–∏ –∏–∑ JSON-—Ñ–æ—Ä–º–∞—Ç–∞ —Ñ–∞–π–ª–∞
async def handle_subscription_check(message: Message, groups):
    not_subscribed_channels = []

    list_admins = checked_admin_list()
    if message.from_user.id in list_admins:
        return []  # –ï—Å–ª–∏ —ç—Ç–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏

    for group in groups:
        member = await message.bot.get_chat_member(chat_id=f'@{group["username"]}', user_id=message.from_user.id)
        print(f"Checking {group['username']}: {member.status}: {message.from_user.id}")  # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if member.status not in ['member', 'creator', 'administrator']:
            not_subscribed_channels.append(group)

    return not_subscribed_channels


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Å—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
async def periodic_subscription_check(message: Message, groups):
    await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ 4 —á–∞—Å–∞ (14400 —Å–µ–∫—É–Ω–¥)

    not_subscribed_channels = await handle_subscription_check(message, groups)

    if not_subscribed_channels:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª—ã
        keyboard = [
            [InlineKeyboardButton(text=channel["name"], url=f'https://t.me/{channel["username"]}') for channel in not_subscribed_channels],
            [InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_subscribes')]
        ]
        keyboard_subscribe = InlineKeyboardMarkup(inline_keyboard=keyboard)

        await message.answer(
            '–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª. –¢–∞–º —è –¥–µ–ª—é—Å—å –Ω–æ–≤—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º, —Ñ–∏—à–∫–∞–º–∏, –¥–µ–ª–∞—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤üî•',
                             reply_markup=keyboard_subscribe)
        print("Message sent asking for subscription with channels.")
    else:
        print("User is subscribed to all channels. No message sent.")



@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    groups = load_from_json()
    admin = checked_admin_list()
    check_user = get_anonim(message.from_user.id)

    logging.info(f"check_user: {check_user}, user_id: {message.from_user.id}, admin_list: {admin}")

    if not check_user:
        write_user_id(message.from_user.id)
        await send_guid(message)
    if check_user:
        await send_guid(message)
    if message.from_user.id in admin:
        await send_admin_panel(message)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
    asyncio.create_task(periodic_subscription_check(message, groups))


@router.callback_query(F.data == 'check_subscribes')
async def check_subscribes(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id
    not_subscribed_channels = []
    groups = load_from_json()

    try:
        for i in groups:
            member = await callback_query.bot.get_chat_member(chat_id=f'@{i["username"]}', user_id=user_id)
            if member.status not in ['member', 'creator', 'administrator']:
                not_subscribed_channels.append(i["username"])

        if not_subscribed_channels:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard_subscribe = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=channel, url=f'https://t.me/{channel}') for channel in not_subscribed_channels]
            ])

            await callback_query.message.answer(
                '–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª. –¢–∞–º —è –¥–µ–ª—é—Å—å –Ω–æ–≤—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º, —Ñ–∏—à–∫–∞–º–∏, –¥–µ–ª–∞—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤üî•',
                reply_markup=keyboard_subscribe)
            await callback_query.answer('Warning!')

        else:
            await callback_query.message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –í—ã –æ—á–µ–Ω—å –ø–æ–º–æ–≥–∞–µ—Ç–µ –Ω–∞–º —Å–≤–æ–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏!')
            await callback_query.answer('–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞–º. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!')

    except Exception as e:
        print(f"Error checking subscriptions: {e}")
        await callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–æ–∫.")


@router.callback_query(F.data == 'back_data2')
async def back_data_func(callback: CallbackQuery):
    await callback.message.edit_text('–ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤–∞—Å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: ', reply_markup=add_new_admin_user_keyboard)


# –ö–æ–ª–ª–±–µ–∫ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
@router.callback_query(F.data == 'newsletter_data')
async def newsletter_func(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ (–§–æ—Ç–æ/–¢–µ–∫—Å—Ç/–¢–µ–∫—Å—Ç –∏ –§–æ—Ç–æ –≤–º–µ—Å—Ç–µ)', reply_markup=back_keyboard)
    await state.set_state(Reg.text)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

@router.message(F.content_type.in_({ContentType.TEXT, ContentType.PHOTO, ContentType.VIDEO}), Reg.text)
async def process_mixed_content(message: Message, state: FSMContext):
    groups = load_from_json()
    all_user_ids = get_all_user()
    text = message.caption if message.caption else message.text
    photo = message.photo[-1].file_id if message.photo else None
    video = message.video.file_id if message.video else None

    for user_id in all_user_ids:
        try:
            user_id_int = int(user_id)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            not_subscribed_channels = await handle_subscription_check(message, groups)

            if not_subscribed_channels:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª—ã, —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                keyboard_subscribe = [
                    [InlineKeyboardButton(text=channel["name"], url=f'https://t.me/{channel["username"]}') for channel in not_subscribed_channels],
                    [InlineKeyboardButton(text='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É', callback_data='check_subscribes')]
                ]
                keyboard_markup = InlineKeyboardMarkup(inline_keyboard=keyboard_subscribe)

                await message.bot.send_message(chat_id=user_id_int,
                                               text='–ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª. –¢–∞–º —è –¥–µ–ª—é—Å—å –Ω–æ–≤—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º, —Ñ–∏—à–∫–∞–º–∏, –¥–µ–ª–∞—é –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–∞–∑–±–æ—Ä—ã –∞–∫–∫–∞—É–Ω—Ç–æ–≤üî•',
                                               reply_markup=keyboard_markup)
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—å–±–æ–π –æ –ø–æ–¥–ø–∏—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_int}")
            else:
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –ø–æ–¥–ø–∏—Å–∞–Ω
                if text and photo:
                    await message.bot.send_photo(chat_id=user_id_int, photo=photo, caption=text)
                elif text and video:
                    await message.bot.send_video(chat_id=user_id_int, video=video, caption=text)
                elif text:
                    await message.bot.send_message(chat_id=user_id_int, text=text)
                elif photo:
                    await message.bot.send_photo(chat_id=user_id_int, photo=photo)
                elif video:
                    await message.bot.send_video(chat_id=user_id_int, video=video)

                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id_int}")

        except Exception as e:
            await message.bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
    await state.clear()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–†–∞—Å—Å—ã–ª–∫–∞ üìù", callback_data='newsletter_data')]
    ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)



@router.message(Command('admin_panel'))
@router.callback_query(F.data == 'admin_panel_data')
async def send_guids_callback(message_or_callback: Message | CallbackQuery):
    if isinstance(message_or_callback, CallbackQuery):
        # –ï—Å–ª–∏ —ç—Ç–æ CallbackQuery, —Ç–æ –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–æ–ª–±–µ–∫–∞
        await message_or_callback.message.edit_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏', reply_markup=add_new_admin_user_keyboard)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ Message (–∫–æ–º–∞–Ω–¥–∞), —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º send_guid
        await message_or_callback.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤—Å–µ –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏', reply_markup=add_new_admin_user_keyboard)
